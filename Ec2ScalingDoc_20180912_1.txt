1) Create IAM policy for lambdas to use. 
ec2_resizer_orchestration policy:
{"Version":"2012-10-17","Statement":[{"Action":"ec2:*","Effect":"Allow","Resource":"*"},{"Sid":"Stmt1536766698095","Action":["lambda:InvokeAsync","lambda:InvokeFunction"],"Effect":"Allow","Resource":"*"},{"Effect":"Allow","Action":"elasticloadbalancing:*","Resource":"*"},{"Effect":"Allow","Action":"cloudwatch:*","Resource":"*"},{"Effect":"Allow","Action":"autoscaling:*","Resource":"*"},{"Effect":"Allow","Action":"iam:CreateServiceLinkedRole","Resource":"*","Condition":{"StringEquals":{"iam:AWSServiceName":["autoscaling.amazonaws.com","ec2scheduled.amazonaws.com","elasticloadbalancing.amazonaws.com","spot.amazonaws.com","spotfleet.amazonaws.com"]}}},{"Action":["autoscaling:Describe*","cloudwatch:*","logs:*","sns:*","iam:GetPolicy","iam:GetPolicyVersion","iam:GetRole"],"Effect":"Allow","Resource":"*"},{"Effect":"Allow","Action":"iam:CreateServiceLinkedRole","Resource":"arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*","Condition":{"StringLike":{"iam:AWSServiceName":"events.amazonaws.com"}}}]}

2) Creaate IAM role for lambdas to use.
- role: ec2_resizer_orchestration
- policy: ec2_resizer_orchestration
- trust: 
{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"},"Action":"sts:AssumeRole"}]}

3) Create ELB.
- name: scalingELB
- add port 80 & 443
- add AZs
- Target Group: scalingGroup - Get the ARN, we'll need to update the orchestration lambdas with this.  It should be something like: arn:aws:elasticloadbalancing:us-east-1:966491901056:targetgroup/scalingGroup/e3c4afb3152a9daf
- Add ONLY primary
- Name: scalingELB 

arn:aws:elasticloadbalancing:us-east-1:013354600892:targetgroup/scalingGroup/5c3dc11416738c29 

4) Create ec2_resizer_py lambda   (5 minute timeout)
 - Use code in ec2_resizer_py.py

5) Create a Lambda function to register an instance to an ELB. (elb_register_ec2_py)    (5 minute timeout)
 - Use code in elb_register_ec2_py.py

6) Create a Lambda function to deregister an instance to an ELB. (elb_deregister_ec2_py)    (5 minute timeout)
 - Use code in elb_deregister_ec2_py.py

7) Create scaleup_orchestration_py lambda (5 minute timeout)
- Use code in scaleup_orchestration_py.py
- Update the instance ID with the SECONDARY instance ID, Target group form the load balancer, and the largest size the instance should be.

8) Create scaledown_orchestration_py lambda (5 minute timeout)
- Use code in scaledown_orchestration_py.py
- Update the instance ID with the SECONDARY instance ID, Target group form the load balancer, and the smallest size the instance should be.

9) Create API Gateway
Name: verticalScaleOrchestration
Description: scales and adds a secondary EC2 instance to an ELB
Endpoint Type: Regional

    a) Create Resource off of root (/):
        Resource Name: scaleup
        Resource Path: scaleup
        Enable API Gateway CORS: True
    
    b) Create Method in scaleup resource
        Type: Get
        Integration Type: Lambda
        Lambda Function: scaleup_orchestration_py
        custom timeout: 300000

    c) Create Resource off of root (/):
        Resource Name: scaledown
        Resource Path: scaledown
        Enable API Gateway CORS: True
    
    d) Create Method in scaledown resource
        Type: Get
        Integration Type: Lambda
        Lambda Function: scaledown_orchestration_py
        custom timeout: 300000


9) Deploy API
    a) Deployment Stage [New Stage]
        Stage Name: Production

    Get the URL from the blue box

    Example: 
    https://uy3mvcg1kf.execute-api.us-east-1.amazonaws.com/Production/scaleup

---------------- Autoscale part ------------------

10) Create SNS topic: 
- arn:aws:sns:us-east-1:966491901056:scalingGroupNotificationQueue (the ARN will be assigned)
- ScaleUp

11) Create CloudWatch alarm on primary instance
- Send a notifcation to: scalingGroupNotificationQueue
- Whenever Avg of CPU Utilization is >= [x]
- For at least 1 consecutive period of 1 min.
- instance: scalingGroupHighPrimary

12) Subscribe scaleup_orchestration_py to ScaleUp sns topic.
13) Subscribe SES to ScaleUp to notify support or customer.